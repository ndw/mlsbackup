#!/usr/bin/perl -- # --*-Perl-*--

use strict;
use English;
use Getopt::Std;
use LWP::UserAgent;
use vars qw($opt_r $opt_m $opt_p $opt_s $opt_i $opt_d $opt_t $opt_M $opt_n);

my $usage = "Usage: $0 [-M] [-n] -r root -m mlsroot -d database [-s since|-t timestamp] [-i uris] [-p pause]\n";

die $usage if ! getopts('p:r:m:s:t:i:d:Mn');

die $usage if ! defined($opt_r);
die $usage if ! defined($opt_m);
die $usage if ! defined($opt_d);
die $usage if defined($opt_s) && defined($opt_t);

my $path = $opt_m;
my $root = $opt_r;
my $pause = $opt_p || 500;
my $uris = $opt_i;
my $since = $opt_s;
my $tstamp = $opt_t;
my $db = $opt_d;
my $mirror = $opt_M;
my $dryrun = $opt_n;
my @ERRORS = ();

my $now = time();
if (defined($tstamp)) {
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
        $atime,$mtime,$ctime,$blksize,$blocks) = stat($tstamp);
    if (defined($mtime)) {
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime($mtime);
        $since = sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ", $year+1900, $mon+1, $mday, $hour, $min, $sec);
    }
}

$root =~ s/\/$//;
$path =~ s/\/$//;
$path = "http://" . $path unless $path =~ /\/\//;

# not supported yet
my $username = undef;
my $password = undef;

my $ua = new LWP::UserAgent;
$ua->agent("mlsbackup.pl/0.1 " . $ua->agent);

my $global_data = "";

my $uricount = 0;
my @files = ();
if (defined($uris)) {
    open (F, $uris) || die "Cannot open URI file: $uris\n";
    while (<F>) {
        chop;
        push (@files, $_);
        $uricount++;
    }
    close (F);
} else {
    print STDERR "Reading URIs from server" . (defined($since) ? " (since $since)\n" : "\n");
    my $uriuri = "$path/uris.xqy?database=$db";
    $uriuri .= "&since=$since" if defined($since);
    $uris = $ua->get($uriuri);
    if ($uris->is_success) {
        @files = split(/\n/, $uris->decoded_content);
        $uricount = $#files + 1;
    } else {
        die "Failed to get URIS: " . $uris->status_line . "\n";
    }
}

print "$uricount URIs to backup.\n";

if ($dryrun) {
    @files = ();
    print "Skipping backup, dryrun.\n";
}

my $count = 0;
my $total = $#files + 1;
while (@files) {
    $count++;
    my $uri = shift @files;
    my $dir = $uri;
    $dir =~ s/^\///;
    $dir =~ s/\/[^\/]+$//;

    $dir = "$root/$dir";

    system("mkdir -p $dir") unless -d $dir;
    die "Cannot create $dir (for $uri)\n" unless -d $dir;

    print STDERR "Getting $count of $total (", int($count*100 / $total), "%): $uri\n";

    my $requri = $path . "/backup.xqy?database=$db&uri=$uri";
    my $file = $uri;
    $file =~ s/^\///;
    $file .= ".xml";

    if ($count % $pause == 0) {
        sleep(5);
    }

    $requri =~ s/\+/%2B/sg;

    getURL($requri, "$root/$file");
}

if (!$dryrun && defined($tstamp)) {
    if (! -f $tstamp) {
        open (F, ">$tstamp");
        close (F);
    }
    utime($now, $now, $tstamp);
}

if (@ERRORS) {
    print STDERR "Error summary:\n";
    foreach my $error (@ERRORS) {
        print STDERR "$error\n";
    }
}

mirror() if $mirror;

sub getURL {
    my $url = shift;
    my $file = shift;
    my $req = new HTTP::Request GET => $url;

    $global_data = "";
    my $res = $ua->request($req, \&callback, 40960);

    if ($res->code() != 200) {
        my $msg := "ERROR: " . $res->code() . " on $url";
        push (@ERRORS, $msg);
        print STDERR "$msg\n";
        print STDERR "\t", $res->as_string(), "\n";
        return;
    }

    open (F, ">$file");
    print F $global_data;
    close (F);
}

sub callback {
    my($data, $response, $protocol) = @_;
    my $clength = $response->content_length();
    $global_data .= $data;
}

sub mirror {
    print STDERR "Reading all URIs from server for mirroring\n";
    my $uricount = 0;
    my $uriuri = "$path/uris.xqy?database=$db";
    my $uris = $ua->get($uriuri);
    my %hash = ();
    if ($uris->is_success) {
        foreach my $uri (split(/\n/, $uris->decoded_content)) {
            $hash{$uri} = 1;
            #print STDERR "-- $uri\n";
            $uricount++;
        }
    } else {
        die "Failed to get URIS: " . $uris->status_line . "\n";
    }

    print "$uricount URIs on server.\n";

    my $rmcount = 0;

    open (F, "find $root -type f -print |");
    while (<F>) {
        chop;

        my $uri = $_;
        my $file = $_;

        if ($uri =~ /\.xml$/) {
            $uri =~ s/\.xml$//;
        } else {
            warn "File does not appear to be a backup: $uri\n" if $dryrun;
        }

        $uri = substr($uri, length($root));

        if (! exists $hash{$uri}) {
            print STDERR "rm $file\n";
            unlink $file unless $dryrun;
            $rmcount++;
        } else {
            #print STDERR "ok $file ($uri)\n";
        }
    }
    close (F);

    print "$rmcount files", $dryrun ? " would have been" : "", " deleted.\n";
}
